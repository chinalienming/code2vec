Overzealous optimization confuses variables
The following code:     // ==ClosureCompiler==   // @compilation_level ADVANCED_OPTIMIZATIONS   // ==/ClosureCompiler==   var uid;   function reset() {    uid = Math.random();   }   function doStuff() {    reset();    var _uid = uid;      if (uid < 0.5) {     doStuff();    }      if (_uid !== uid) {     throw 'reset() was called';    }   }   doStuff();    ...gets optimized to:     var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw"reset() was called";}b();    Notice how _uid gets optimized away and (uid!==_uid) becomes (a!==a) even though doStuff() might have been called and uid's value may have changed and become different from _uid.    As an aside, replacing the declaration with "var _uid = +uid;" fixes it, as does adding an extra "uid = _uid" after "var _uid = uid".