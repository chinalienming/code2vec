Switched order of "delete key" and "key in" statements changes semantic
// Input:    var customData = { key: 'value' };    function testRemoveKey( key ) {   var dataSlot = customData,    retval = dataSlot && dataSlot[ key ],    hadKey = dataSlot && ( key in dataSlot );     if ( dataSlot )    delete dataSlot[ key ];     return hadKey ? retval : null;  };    console.log( testRemoveKey( 'key' ) ); // 'value'  console.log( 'key' in customData ); // false      // Compiled version:    var customData={key:"value"};function testRemoveKey(b){var a=customData,c=a&&a[b];a&&delete a[b];return a&&b in a?c:null}console.log(testRemoveKey("key"));console.log("key"in customData);    // null  // false      "b in a" is executed after "delete a[b]" what obviously doesn't make sense in this case.      Reproducible on: http://closure-compiler.appspot.com/home and in "Version: 20120430 (revision 1918) Built on: 2012/04/30 18:02"